plugins {
    id 'application'
    id "org.beryx.jlink" version "2.24.2"
}

application {
    mainModule = "releasefab.application"
    mainClass.set("$moduleName/de.comlet.releasefab.Main")
}

jar {
    doFirst {
        println "Packaging module $project.name"
    }
    archivesBaseName  = 'ReleaseFab'
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--ignore-signing-information']
    jlinkBasePath = "$rootProductsDir/jlink"
    imageDir = file("$rootProductsDir/jlink/image")
    imageZip = file("$rootProductsDir/jlink/zipped/releasefab.zip")

    mainClass = 'de.comlet.releasefab.Main'

    customImage {
        appModules = ['releasefab.library', 'releasefab.application', 'releasefab.git.plugin', 'releasefab.git.service', 'releasefab.version', 'releasefab.importantinformation']
    }
    
    launcher {
        name = 'ReleaseFab'
        jvmArgs = ['-Dlogback.configurationFile={{BIN_DIR}}/logback.xml']
        windowsScriptTemplate = file("$rootProjectPath/windowsScriptTemplate.txt")
        unixScriptTemplate = file("$rootProjectPath/unixScriptTemplate.txt")
    }

    mergedModule {
        additive = true
        uses 'ch.qos.logback.classic.spi.Configurator';
    }

    targetPlatform("$PLATFORM") {
        if("$PLATFORM".contains('linux')) {
            jdkHome = jdkDownload("https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.17%2B8/OpenJDK11U-jdk_x64_linux_hotspot_11.0.17_8.tar.gz")
        }
        else {
            jdkHome = jdkDownload("https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.17%2B8/OpenJDK11U-jdk_x64_windows_hotspot_11.0.17_8.zip")
        }
    }
}

task zipJlink(type: Zip) {
    archiveFileName = "ReleaseFab-"+project.getProperty("PLATFORM")+".zip"
    destinationDirectory = file("$rootProductsDir/jlink/zipped")

    from("$rootProductsDir/jlink/image/ReleaseFab-$PLATFORM/packaged")
}

def packageFiles = copySpec {
    from "$rootProductsDir/jlink/image/ReleaseFab-$PLATFORM"
}

def jlinkSettingsWindows = copySpec {
    from("$rootProjectPath/application") {
        include 'settings.xml'
        include 'logback.xml'
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    from("$rootProjectPath/scripts/jlink") {
        include 'ReleaseFab.bat'
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    from("$rootProductsDir/jlink/image/ReleaseFab-windows/bin") {
        include 'ReleaseFab.bat'
        rename { String fileName ->
            fileName.replace("ReleaseFab.bat", "ReleaseFab_Standalone.bat")
        }
    }
}

def jlinkSettingsLinux = copySpec {
    from("$rootProjectPath/application") {
        include 'settings.xml'
        include 'logback.xml'
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    from("$rootProjectPath/scripts/jlink") {
        include 'ReleaseFab'
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    from("$rootProductsDir/jlink/image/ReleaseFab-linux/bin") {
        include 'ReleaseFab'
        rename { String fileName ->
            fileName.replace("ReleaseFab", "ReleaseFab_Standalone")
        }
        fileMode 0755
    }
}

def configFiles = copySpec {
    from("$rootProjectPath/application/config") {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

def license = copySpec {
    from("$rootProjectPath") {
        include "LICENSE.md"
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

task createJlinkDelivery(type: Copy) {
    doFirst {
        println 'Copying files to jlink image ...'
    }
    into "$rootProductsDir/jlink/image"
    into("ReleaseFab-$PLATFORM") {
      if ("$PLATFORM".contains('linux')) {
          with jlinkSettingsLinux
      }
      else {
        with jlinkSettingsWindows
      }
    }
    into("ReleaseFab-$PLATFORM/config") {
        with configFiles
    }
    into("ReleaseFab-$PLATFORM") {
        with license
    }
    into("ReleaseFab-$PLATFORM/packaged/releasefab") {
        with packageFiles
    }
}

createJlinkDelivery.dependsOn 'jlink'
createJlinkDelivery.finalizedBy 'zipJlink'

test {
    workingDir = "$rootProjectPath"

    doFirst {
        println "Testing module $project.name ..."
        if (project.hasProperty('ALM_USER') && 
            project.hasProperty('ALM_PASSWORD') &&
            project.hasProperty('ALM_SERVER')) {
            jvmArgs += ["-DALM_USER=$ALM_USER", "-DALM_PASSWORD=$ALM_PASSWORD", "-DALM_SERVER=$ALM_SERVER"]
        }

        if (project.hasProperty('ALM_CERTIFICATE_PATH_WINDOWS')) {
            jvmArgs += ["-DALM_CERTIFICATE_PATH_WINDOWS=$ALM_CERTIFICATE_PATH_WINDOWS"]
        }

        if (project.hasProperty('ALM_CERTIFICATE_PATH_LINUX')) {
            jvmArgs += ["-DALM_CERTIFICATE_PATH_LINUX=$ALM_CERTIFICATE_PATH_LINUX"]
        }

        if (project.hasProperty('ENABLE_ALM_TESTS')) {
            environment "ENABLE_ALM_TESTS", "$ENABLE_ALM_TESTS"
        }
    }

    moduleOptions {
        addOpens = ['releasefab.application/de.comlet.releasefab' : 'org.junit.platform.commons']
    }
}

task createDelivery(type: Copy) {
    doFirst {
        println "Copying JAR of module $project.name to delivery folder..."
    }
    from(jar.archiveFile) {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    into "$rootProductsDir/delivery/bin"
}

dependencies{
    implementation project(':ReleaseFab_Library')

    // Test runtime dependencies (include all Plugin dependencies for integration testing)
    implementation project(':ReleaseFab_Version')
    implementation project(':ReleaseFab_ImportantInformation')

    // Git
    implementation project(':ReleaseFab_Git_Plugin')
    implementation project(':ReleaseFab_Git_Classes')
    implementation project(':ReleaseFab_Git_Service')
    implementation group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '6.0.0.202111291000-r'
    implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
}
