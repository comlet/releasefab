name: CI/CD Pipeline

on:
  push:
  pull_request:
  
jobs:
  CI-CD:
    name: "CI/CD"
    runs-on: ubuntu-20.04
    steps:
    
    # SETUP
    - name: Set Timezone
      run: sudo timedatectl set-timezone Europe/Berlin

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: '0'

    - name: Store paths
      run: |
          echo "SOURCE_PATH=/home/runner/work/releasefab/releasefab" >> $GITHUB_ENV
          echo "PRODUCTS_PATH=/home/runner/work/releasefab/releasefab_products" >> $GITHUB_ENV

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11.0.17+8'
        distribution: 'temurin'
        cache: gradle

    - name: Restore cached packages
      id: cache-packages-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          ~/.sonar/cache
          ~/.gradle/caches
        key: ${{ runner.os }}-releasefab

    # GRADLE CI/CD
    - name: Run CI/CD with gradle
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
            ./gradlew build -PPLATFORM=linux --info #-Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}

    - name: Publish Unit-Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Unit-Tests
        path: ${{ env.PRODUCTS_PATH }}/bin/**/test-results/test/*.xml
        reporter: java-junit

    # RELEASENOTES:
    - name: Get the version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      if: startsWith(github.ref, 'refs/tags/')

    - name: Run jlink with gradle
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
            ./gradlew createJlinkDelivery -PPLATFORM=linux
      if: startsWith(github.ref, 'refs/tags/')

    - name: Checkout main
      uses: actions/checkout@v3
      with:
        fetch-depth: '0'
        ref: 'main'
        token: '${{ secrets.GITHUB_TOKEN }}'
      if: startsWith(github.ref, 'refs/tags/')

    - name: Document new delivery
      run: |
            chmod +x ReleaseFab_Standalone
            ./ReleaseFab_Standalone -cli source=${{ env.SOURCE_PATH }} generalsettings=${{ env.PRODUCTS_PATH }}/jlink/image/ReleaseFab-linux delivery_name=${{ env.RELEASE_VERSION }} user=GitHub-Actions, pw=change
      working-directory: ${{ env.PRODUCTS_PATH }}/jlink/image/ReleaseFab-linux
      if: startsWith(github.ref, 'refs/tags/')

    - name: Set Git credentials
      uses: oleksiyrudenko/gha-git-credentials@v2-latest
      with:
        token: '${{ secrets.GITHUB_TOKEN }}'
      if: startsWith(github.ref, 'refs/tags/')

    - name: Commit new version information
      run: |
            git add config/versions.xml
            git commit -m 'Document version ${{ env.RELEASE_VERSION }} to versions.xml;
            Issue: #1;
            API-modification: Y[] N[X];
            Create new release in versions.xml.'
            git push
      if: startsWith(github.ref, 'refs/tags/')

    - name: Export ReleaseNotes as Docbook
      run: ./ReleaseFab_Standalone -cli -docbook source=${{ env.SOURCE_PATH }} generalsettings=${{ env.PRODUCTS_PATH }}/jlink/image/ReleaseFab-linux resultfile=${{ env.SOURCE_PATH }}/docbook.xml user=GitHub-Actions, pw=change
      working-directory: ${{ env.PRODUCTS_PATH }}/jlink/image/ReleaseFab-linux
      if: startsWith(github.ref, 'refs/tags/')

    - name: Get Pandoc
      uses: r-lib/actions/setup-pandoc@v2
      with:
        pandoc-version: '2.17.1'
    
    - name: Convert Release Notes to Markdown
      run: pandoc -f docbook -t markdown_mmd ${{ env.SOURCE_PATH }}/docbook.xml -o ${{ env.RELEASE_VERSION }}-Releasenotes.md # gets appended to pandoc command
      if: startsWith(github.ref, 'refs/tags/')

    # RELEASE
    - name: Create release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: ${{ github.ref }}
        tag_name: ${{ github.ref }}
        body_path: ${{ env.SOURCE_PATH }}/${{ env.RELEASE_VERSION }}-Releasenotes.md
      env:
        GITHUB_TOKEN: ${{ github.token }}
      if: startsWith(github.ref, 'refs/tags/')

    - name: Upload artifacts to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.PRODUCTS_PATH }}/jlink/zipped/ReleaseFab-linux.zip
        asset_name: ReleaseFab-${{ env.RELEASE_VERSION }}-linux.zip
        asset_content_type: application/zip
      if: startsWith(github.ref, 'refs/tags/')
    
    - name: Run jlink with gradle Windows
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      run: |
            chmod +x gradlew
            ./gradlew clean build createJlinkDelivery -PPLATFORM=windows
      if: startsWith(github.ref, 'refs/tags/')
      
    - name: Upload Windows artifacts to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.PRODUCTS_PATH }}/jlink/zipped/ReleaseFab-windows.zip
        asset_name: ReleaseFab-${{ env.RELEASE_VERSION }}-windows.zip
        asset_content_type: application/zip
      if: startsWith(github.ref, 'refs/tags/')

    # DOCUMENTATION
    - name: Generate documentation with doxygen (release)
      run: |
          sudo apt install libclang-9-dev
          sudo apt install libclang-cpp9
          ./gradlew doxygen -PVERSION=${{ env.RELEASE_VERSION }} --info
      if: startsWith(github.ref, 'refs/tags/')

    - name: Generate documentation with doxygen (develop)
      run: |
          sudo apt install libclang-9-dev
          sudo apt install libclang-cpp9
          ./gradlew doxygen -PVERSION=develop --info
      if: (github.ref == 'refs/heads/develop')

    - name: Deploy documentation of develop branch to GH Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ${{ env.PRODUCTS_PATH }}/doxygen/html
        destination_dir: develop 
      if: github.ref == 'refs/heads/develop'

    - name: Deploy documentation of release to GH Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ${{ env.PRODUCTS_PATH }}/doxygen/html
        destination_dir: ${{ env.RELEASE_VERSION }}
      if: startsWith(github.ref, 'refs/tags/')

    - name: Create redirection
      run: |
            mkdir ${{ env.PRODUCTS_PATH }}/redirect
            touch ${{ env.PRODUCTS_PATH }}/redirect/index.html
            echo '<head><meta http-equiv="Refresh" content="0; url='/releasefab/${{ env.RELEASE_VERSION }}'"/></head>' > ${{ env.PRODUCTS_PATH }}/redirect/index.html
      if: startsWith(github.ref, 'refs/tags/')

    - name: Deploy redirection file to root
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ${{ env.PRODUCTS_PATH }}/redirect
        keep_files: true
      if: startsWith(github.ref, 'refs/tags/')
      
    - name: Save packages
      id: cache-packages-save
      uses: actions/cache/save@v3
      with:
        path: |
          ~/.sonar/cache
          ~/.gradle/caches
        key: ${{ steps.cache-packages-restore.outputs.cache-primary-key }}
